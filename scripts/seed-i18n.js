const { MongoClient } = require("mongodb")
const { v4: uuidv4 } = require("uuid")
require("dotenv").config()

const MONGODB_URI = process.env.MONGODB_URI
const DB_NAME = process.env.DB_NAME || "laptopsun"

if (!MONGODB_URI) {
  console.error("‚ùå MONGODB_URI environment variable is not set")
  process.exit(1)
}

// Enhanced sample data with i18n structure
const seedData = {
  categories: [
    {
      documentId: uuidv4(),
      translations: {
        vi: {
          name: "MacBook",
          description: "D·ªãch v·ª• s·ª≠a ch·ªØa MacBook chuy√™n nghi·ªáp",
          slug: "macbook",
        },
        en: {
          name: "MacBook",
          description: "Professional MacBook repair services",
          slug: "macbook",
        },
      },
      order: 1,
      isActive: true,
    },
    {
      documentId: uuidv4(),
      translations: {
        vi: {
          name: "Laptop",
          description: "S·ª≠a ch·ªØa laptop c√°c h√£ng",
          slug: "laptop",
        },
        en: {
          name: "Laptop",
          description: "Multi-brand laptop repair",
          slug: "laptop",
        },
      },
      order: 2,
      isActive: true,
    },
    {
      documentId: uuidv4(),
      translations: {
        vi: {
          name: "Kh√¥i ph·ª•c d·ªØ li·ªáu",
          description: "D·ªãch v·ª• kh√¥i ph·ª•c d·ªØ li·ªáu chuy√™n nghi·ªáp",
          slug: "khoi-phuc-du-lieu",
        },
        en: {
          name: "Data Recovery",
          description: "Professional data recovery services",
          slug: "data-recovery",
        },
      },
      order: 3,
      isActive: true,
    },
  ],

  services: [
    {
      documentId: uuidv4(),
      categoryIndex: 0, // MacBook category
      translations: {
        vi: {
          name: "S·ª≠a m√†n h√¨nh MacBook Pro",
          description:
            "Thay th·∫ø m√†n h√¨nh MacBook Pro b·ªã v·ª°, n·ª©t, ho·∫∑c kh√¥ng hi·ªÉn th·ªã. Ch√∫ng t√¥i s·ª≠ d·ª•ng linh ki·ªán ch√≠nh h√£ng v√† cung c·∫•p b·∫£o h√†nh 6 th√°ng cho d·ªãch v·ª• thay m√†n h√¨nh.",
          shortDescription: "Thay m√†n h√¨nh MacBook Pro ch√≠nh h√£ng, b·∫£o h√†nh 6 th√°ng",
          slug: "sua-man-hinh-macbook-pro",
        },
        en: {
          name: "MacBook Pro Screen Repair",
          description:
            "Replace broken, cracked or non-displaying MacBook Pro screens. We use genuine parts and provide 6-month warranty for screen replacement service.",
          shortDescription: "Genuine MacBook Pro screen replacement with 6-month warranty",
          slug: "macbook-pro-screen-repair",
        },
      },
      price: { from: 2500000, to: 5000000 },
      estimatedTime: "2-3 gi·ªù",
      icon: "laptop",
      warranty: "6 th√°ng",
      isActive: true,
      isFeatured: true,
      order: 1,
    },
    {
      documentId: uuidv4(),
      categoryIndex: 0, // MacBook category
      translations: {
        vi: {
          name: "Thay pin MacBook Air",
          description:
            "Thay pin MacBook Air b·ªã chai, ph·ªìng ho·∫∑c kh√¥ng s·∫°c ƒë∆∞·ª£c. S·ª≠ d·ª•ng pin ch√≠nh h√£ng v·ªõi c√¥ng ngh·ªá m·ªõi nh·∫•t, gi√∫p k√©o d√†i th·ªùi gian s·ª≠ d·ª•ng m√°y.",
          shortDescription: "Thay pin MacBook Air ch√≠nh h√£ng, c·∫£i thi·ªán th·ªùi l∆∞·ª£ng pin",
          slug: "thay-pin-macbook-air",
        },
        en: {
          name: "MacBook Air Battery Replacement",
          description:
            "Replace degraded, swollen or non-charging MacBook Air batteries. Using genuine batteries with latest technology to extend device usage time.",
          shortDescription: "Genuine MacBook Air battery replacement, improved battery life",
          slug: "macbook-air-battery-replacement",
        },
      },
      price: { from: 1800000, to: 2500000 },
      estimatedTime: "1-2 gi·ªù",
      icon: "cpu",
      warranty: "6 th√°ng",
      isActive: true,
      isFeatured: true,
      order: 2,
    },
    {
      documentId: uuidv4(),
      categoryIndex: 1, // Laptop category
      translations: {
        vi: {
          name: "S·ª≠a b√†n ph√≠m laptop",
          description:
            "S·ª≠a ch·ªØa b√†n ph√≠m laptop b·ªã li·ªát ph√≠m, d√≠nh ph√≠m, ho·∫∑c kh√¥ng nh·∫≠n ph√≠m. H·ªó tr·ª£ t·∫•t c·∫£ c√°c h√£ng laptop ph·ªï bi·∫øn nh∆∞ Dell, HP, Asus, Acer, Lenovo.",
          shortDescription: "S·ª≠a b√†n ph√≠m laptop m·ªçi h√£ng, thay ph√≠m l·∫ª",
          slug: "sua-ban-phim-laptop",
        },
        en: {
          name: "Laptop Keyboard Repair",
          description:
            "Fix laptop keyboards with stuck keys, dead keys or unresponsive keys. Support all popular laptop brands like Dell, HP, Asus, Acer, Lenovo.",
          shortDescription: "Laptop keyboard repair all brands, individual key replacement",
          slug: "laptop-keyboard-repair",
        },
      },
      price: { from: 300000, to: 1200000 },
      estimatedTime: "1-2 gi·ªù",
      icon: "laptop",
      warranty: "3 th√°ng",
      isActive: true,
      isFeatured: true,
      order: 3,
    },
    {
      documentId: uuidv4(),
      categoryIndex: 2, // Data Recovery category
      translations: {
        vi: {
          name: "Kh√¥i ph·ª•c d·ªØ li·ªáu",
          description:
            "Kh√¥i ph·ª•c d·ªØ li·ªáu t·ª´ ·ªï c·ª©ng b·ªã h·ªèng, format nh·∫ßm, virus t·∫•n c√¥ng. S·ª≠ d·ª•ng c√¥ng ngh·ªá ti√™n ti·∫øn ƒë·ªÉ kh√¥i ph·ª•c t·ªëi ƒëa d·ªØ li·ªáu quan tr·ªçng c·ªßa b·∫°n.",
          shortDescription: "Kh√¥i ph·ª•c d·ªØ li·ªáu chuy√™n nghi·ªáp, t·ª∑ l·ªá th√†nh c√¥ng cao",
          slug: "khoi-phuc-du-lieu",
        },
        en: {
          name: "Data Recovery Service",
          description:
            "Recover data from damaged hard drives, accidental formatting, virus attacks. Using advanced technology to maximize recovery of your important data.",
          shortDescription: "Professional data recovery with high success rate",
          slug: "data-recovery-service",
        },
      },
      price: { from: 500000, to: 3000000 },
      estimatedTime: "1-5 ng√†y",
      icon: "harddrive",
      warranty: "1 th√°ng",
      isActive: true,
      isFeatured: true,
      order: 4,
    },
  ],
}

async function seedDatabase() {
  const client = new MongoClient(MONGODB_URI)

  try {
    console.log("üîå Connecting to MongoDB...")
    await client.connect()
    console.log("‚úÖ Connected to MongoDB")

    const db = client.db(DB_NAME)

    // Clear existing collections
    console.log("üßπ Clearing existing i18n data...")
    await db.collection("categories").deleteMany({})
    await db.collection("services").deleteMany({})

    // Seed Categories
    console.log("üìÇ Seeding categories with i18n structure...")
    const categoryDocuments = []

    seedData.categories.forEach((category) => {
      // Create Vietnamese document
      categoryDocuments.push({
        documentId: category.documentId,
        locale: "vi",
        name: category.translations.vi.name,
        description: category.translations.vi.description,
        slug: category.translations.vi.slug,
        order: category.order,
        isActive: category.isActive,
        createdAt: new Date(),
        updatedAt: new Date(),
      })

      // Create English document
      categoryDocuments.push({
        documentId: category.documentId,
        locale: "en",
        name: category.translations.en.name,
        description: category.translations.en.description,
        slug: category.translations.en.slug,
        order: category.order,
        isActive: category.isActive,
        createdAt: new Date(),
        updatedAt: new Date(),
      })
    })

    await db.collection("categories").insertMany(categoryDocuments)
    console.log(`‚úÖ Inserted ${categoryDocuments.length} category documents`)

    // Seed Services
    console.log("üõ†Ô∏è  Seeding services with i18n structure...")
    const serviceDocuments = []

    seedData.services.forEach((service) => {
      const categoryDocumentId = seedData.categories[service.categoryIndex].documentId

      // Create Vietnamese document
      serviceDocuments.push({
        documentId: service.documentId,
        locale: "vi",
        name: service.translations.vi.name,
        description: service.translations.vi.description,
        shortDescription: service.translations.vi.shortDescription,
        slug: service.translations.vi.slug,
        categoryDocumentId,
        price: service.price,
        estimatedTime: service.estimatedTime,
        icon: service.icon,
        warranty: service.warranty,
        isActive: service.isActive,
        isFeatured: service.isFeatured,
        order: service.order,
        createdAt: new Date(),
        updatedAt: new Date(),
      })

      // Create English document
      serviceDocuments.push({
        documentId: service.documentId,
        locale: "en",
        name: service.translations.en.name,
        description: service.translations.en.description,
        shortDescription: service.translations.en.shortDescription,
        slug: service.translations.en.slug,
        categoryDocumentId,
        price: service.price,
        estimatedTime: service.estimatedTime,
        icon: service.icon,
        warranty: service.warranty,
        isActive: service.isActive,
        isFeatured: service.isFeatured,
        order: service.order,
        createdAt: new Date(),
        updatedAt: new Date(),
      })
    })

    await db.collection("services").insertMany(serviceDocuments)
    console.log(`‚úÖ Inserted ${serviceDocuments.length} service documents`)

    console.log("üéâ i18n Database seeding completed successfully!")
    console.log("\nüìä Summary:")
    console.log(`- Categories: ${seedData.categories.length} (${categoryDocuments.length} documents)`)
    console.log(`- Services: ${seedData.services.length} (${serviceDocuments.length} documents)`)
    console.log(`- Languages: Vietnamese (vi) + English (en)`)
  } catch (error) {
    console.error("‚ùå Error seeding database:", error)
    process.exit(1)
  } finally {
    await client.close()
    console.log("üîå MongoDB connection closed")
  }
}

// Run the seed function
if (require.main === module) {
  seedDatabase()
}

module.exports = { seedData, seedDatabase }
